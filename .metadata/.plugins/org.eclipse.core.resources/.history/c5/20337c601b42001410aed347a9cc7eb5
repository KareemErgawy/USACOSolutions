/*
 ID: kareem_2
 PROG: hamming
 LANG: C++
 */
#include <iostream>
#include <fstream>
using namespace std;

int n;
int d;
int maxVal;
int** distances;
int* solution;
ofstream fout("hamming.out");

int calculateDistance2(int x, int y) {
	int xOr = x ^ y;
	int distance = 0;
	while (xOr != 0) {
		xOr = (xOr ^ (xOr & -xOr));
		distance++;
	}
	return distance;
}

void search(int index, int start) {
	if (index == n) {
		for (int i = 0; i < n; i++) {
			fout << solution[i];
			if (i % 9 == 0) {
				fout << endl;
			} else {
				fout << " ";
			}
		}

		return;
	}

	int i;
	for (i = start; i < maxVal; i++) {
		for (int j = 0; j < index; j++) {
			if (distances[solution[j]][i] >= d) {
				break;
			}
		}
	}

	if (i < maxVal) {
		solution[index] = i;
		search(index + 1, i + 1);
	}
}

int main() {
	int b;
	ifstream fin("hamming.in");

	fin >> n >> b >> d;
	maxVal = 2 << d;
	distances = new int*[maxVal];

	for (int i = 0; i < maxVal; i++) {
		distances[i] = new int[maxVal];
		for (int j = i + 1; j < maxVal; j++) {
			distances[i][j] = calculateDistance2(i, j);
		}
	}

	solution = new int[n];
	solution[0] = 0;
	search(1, 1);

	return 0;
}
